#pragma once
#include "cmmn.h"
#include "surface.h"
#include "camera.h"
#include "texture.h"
#include "sampler.h"

namespace plu {

	// implements a multithreaded, tiled renderer with jittered multisample AA
	struct renderer {
	
		const uvec2 tile_size;
		surface* scene;
		camera cam;
		sampler* main_sampler;

		renderer(surface* S, const camera& C, uvec2 tile_size, sampler* smp)
			: scene(S), cam(C), tile_size(tile_size), main_sampler(smp)
		{}

		// basically calls ray_color for the ray generated by cam for each pixel in target and stores the result color there
		void render(shared_ptr<texture2d> target) const;
		vec3 ray_color(const ray& r, size_t depth = 0) const;
	};
}
