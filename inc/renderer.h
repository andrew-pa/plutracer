#pragma once
#include "cmmn.h"
#include "surface.h"
#include "camera.h"
#include "texture.h"

namespace plu {

	// implements a multithreaded, tiled renderer with jittered multisample AA
	struct renderer {
	
		const uvec2 tile_size;
		const uint32_t num_samples_sq;
		surface* scene;
		camera cam;

		renderer(surface* S, const camera& C, uvec2 tile_size, uint32_t num_samples)
			: scene(S), cam(C), tile_size(tile_size), num_samples_sq(sqrt(num_samples))
		{}

		// basically calls ray_color for the ray generated by cam for each pixel in target and stores the result color there
		void render(shared_ptr<texture2d> target) const;
		vec3 ray_color(const ray& r, size_t depth = 0) const;	
	private:
		void render_tile(shared_ptr<texture2d> target, vec2 inv_size, float inv_ssq, uvec2 pos) const;
	};
}
