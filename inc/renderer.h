#pragma once
#include "cmmn.h"
#include "surface.h"
#include "light.h"
#include "camera.h"
#include "texture.h"
#include "sampler.h"

namespace plu {

	// implements a multithreaded, tiled renderer with jittered multisample AA
	struct renderer {
	
		const uvec2 tile_size;
		surface* scene;
		vector<shared_ptr<light>> lights;
		camera cam;
		sampler* main_sampler;

		renderer(surface* S, const camera& C, uvec2 tile_size, sampler* smp, const vector<shared_ptr<light>>& l)
			: scene(S), cam(C), tile_size(tile_size), main_sampler(smp), lights(l)
		{}

		// basically calls ray_color for the ray generated by cam for each pixel in target and stores the result color there
		void render(shared_ptr<texture2d> target) const;
		vec3 ray_color(const ray& r, sample& smp, memory::arena& arena) const;

		vec3 estimate_direct_light(sample& smp, vec3 p, vec3 n, vec3 wo, bsdf& b, light* l, bxdf::type t) const;
		vec3 uniform_sample_one_light(sample& smp, vec3 p, vec3 n, vec3 wo, bsdf& b) const;
	};
}
